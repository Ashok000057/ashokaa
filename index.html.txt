<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Ultimate Snake Game</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    :root {
      --bg-color: #111;
      --snake-color: #0f0;
      --food-color: red;
      --obstacle-color: gray;
      --snake-face-color: yellow;
    }
    body.light {
      --bg-color: #fff;
      --snake-color: green;
      --food-color: darkred;
      --obstacle-color: black;
      --snake-face-color: orange;
    }
    body {
      margin: 0;
      font-family: sans-serif;
      background: url('https://www.transparenttextures.com/patterns/asfalt-dark.png') repeat;
      color: white;
      text-align: center;
    }
    canvas {
      background-color: var(--bg-color);
      display: block;
      margin: 10px auto;
      border: 3px solid white;
    }
    .controls {
      margin: 10px;
    }
    button, select {
      padding: 8px 16px;
      margin: 4px;
      font-size: 16px;
    }
    .slider-label {
      font-size: 16px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h1>üêç Ultimate Snake Game</h1>
  <div class="controls" id="levelButtons"></div>
  <div class="controls">
    <label for="speedSelect">Snake Speed:</label>
    <select id="speedSelect">
      <option value="150">Low</option>
      <option value="80" selected>Medium</option>
      <option value="40">Fast</option>
    </select>
  </div>
  <canvas id="canvas" width="400" height="400"></canvas>
  <div id="score">Score: 0 | High Score: 0</div>

  <audio id="eatSound" src="https://www.soundjay.com/button/sounds/button-3.mp3"></audio>
  <audio id="dieSound" src="https://www.soundjay.com/button/sounds/button-10.mp3"></audio>
  <audio id="bgMusic" src="https://www.bensound.com/bensound-music/bensound-creativeminds.mp3" loop></audio>

  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const box = 20;
    const rows = canvas.width / box;
    let snake, direction, food, score, highScore, interval, currentSpeed;
    let paused = false;
    let musicOn = false;
    const eatSound = document.getElementById('eatSound');
    const dieSound = document.getElementById('dieSound');
    const bgMusic = document.getElementById('bgMusic');
    const speedSelect = document.getElementById('speedSelect');

    let obstacles = [];

    function generateObstacles(level) {
      const obs = [];
      const count = Math.min(level, 50) * 3;
      for (let i = 0; i < count; i++) {
        const x = Math.floor(Math.random() * rows) * box;
        const y = Math.floor(Math.random() * rows) * box;
        obs.push({ x, y });
      }
      return obs;
    }

    function createLevelButtons() {
      const container = document.getElementById("levelButtons");
      for (let i = 1; i <= 50; i++) {
        const btn = document.createElement("button");
        btn.textContent = `Level ${i}`;
        btn.onclick = () => startGame(currentSpeed, i);
        container.appendChild(btn);
      }
      const misc = document.createElement("div");
      misc.innerHTML = `
        <br>
        <button onclick="togglePause()">‚èØ Pause/Resume</button>
        <button onclick="startGame(currentSpeed, currentLevel)">üîÑ Restart</button>
        <button onclick="toggleTheme()">üåì Toggle Theme</button>
        <button onclick="toggleMusic()">üéµ Toggle Music</button>
      `;
      container.appendChild(misc);
    }

    function startGame(speed, level = 1) {
      currentSpeed = speed;
      currentLevel = level;
      clearInterval(interval);
      snake = [{ x: 160, y: 160 }];
      direction = 'RIGHT';
      score = 0;
      food = randomPosition();
      obstacles = generateObstacles(level);
      interval = setInterval(gameLoop, speed);
      updateScore();
    }

    function updateScore() {
      document.getElementById('score').innerText = `Score: ${score} | High Score: ${highScore}`;
    }

    function toggleTheme() {
      document.body.classList.toggle('light');
    }

    function toggleMusic() {
      musicOn = !musicOn;
      musicOn ? bgMusic.play() : bgMusic.pause();
    }

    function togglePause() {
      paused = !paused;
    }

    function randomPosition() {
      let pos;
      do {
        pos = {
          x: Math.floor(Math.random() * rows) * box,
          y: Math.floor(Math.random() * rows) * box
        };
      } while (snake.some(s => s.x === pos.x && s.y === pos.y) ||
               obstacles.some(o => o.x === pos.x && o.y === pos.y));
      return pos;
    }

    document.addEventListener('keydown', e => {
      if (e.key === 'ArrowUp' && direction !== 'DOWN') direction = 'UP';
      else if (e.key === 'ArrowDown' && direction !== 'UP') direction = 'DOWN';
      else if (e.key === 'ArrowLeft' && direction !== 'RIGHT') direction = 'LEFT';
      else if (e.key === 'ArrowRight' && direction !== 'LEFT') direction = 'RIGHT';
    });

    speedSelect.addEventListener('change', (e) => {
      const newSpeed = parseInt(e.target.value);
      if (!paused) startGame(newSpeed, currentLevel);
    });

    function gameLoop() {
      if (paused) return;

      const head = { ...snake[0] };
      if (direction === 'UP') head.y -= box;
      else if (direction === 'DOWN') head.y += box;
      else if (direction === 'LEFT') head.x -= box;
      else if (direction === 'RIGHT') head.x += box;

      if (head.x < 0 || head.x >= canvas.width ||
          head.y < 0 || head.y >= canvas.height ||
          snake.some(s => s.x === head.x && s.y === head.y) ||
          obstacles.some(o => o.x === head.x && o.y === head.y)) {
        clearInterval(interval);
        dieSound.play();
        if (score > highScore) {
          highScore = score;
          localStorage.setItem('snakeHighScore', highScore);
        }
        alert('üíÄ Game Over!');
        return;
      }

      if (head.x === food.x && head.y === food.y) {
        eatSound.play();
        score += 10;
        food = randomPosition();
      } else {
        snake.pop();
      }

      snake.unshift(head);
      draw();
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = getComputedStyle(document.body).getPropertyValue('--snake-color');
      for (let i = 1; i < snake.length; i++) {
        ctx.fillRect(snake[i].x, snake[i].y, box, box);
      }

      // Draw snake face (head)
      const head = snake[0];
      ctx.fillStyle = getComputedStyle(document.body).getPropertyValue('--snake-face-color');
      ctx.fillRect(head.x, head.y, box, box);
      ctx.fillStyle = 'black';
      ctx.beginPath();
      ctx.arc(head.x + box * 0.25, head.y + box * 0.3, 2, 0, Math.PI * 2); // left eye
      ctx.arc(head.x + box * 0.75, head.y + box * 0.3, 2, 0, Math.PI * 2); // right eye
      ctx.fill();

      ctx.fillStyle = getComputedStyle(document.body).getPropertyValue('--food-color');
      ctx.beginPath();
      ctx.arc(food.x + box / 2, food.y + box / 2, box / 2, 0, Math.PI * 2);
      ctx.fill();

      ctx.fillStyle = getComputedStyle(document.body).getPropertyValue('--obstacle-color');
      obstacles.forEach(o => ctx.fillRect(o.x, o.y, box, box));

      updateScore();
    }

    let currentLevel = 1;
    highScore = parseInt(localStorage.getItem('snakeHighScore') || '0');
    createLevelButtons();
    startGame(80);
  </script>
</body>
</html>
